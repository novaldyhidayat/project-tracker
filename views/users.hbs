{{!< layouts/main}}

<div class="animate-fade-in">
  <div class="mb-8">
    <div class="flex items-center justify-between">
      <div>
        <h2 class="text-2xl font-bold text-gray-800 mb-2">User Management</h2>
        <p class="text-gray-600">Manage team members and their access permissions</p>
      </div>
      <div class="flex gap-3">
        <button class="btn btn-secondary" onclick="refreshUsers()">
          <i class="fas fa-sync-alt"></i>
          Refresh
        </button>
        <button class="btn btn-primary" onclick="inviteUser()">
          <i class="fas fa-user-plus"></i>
          Invite User
        </button>
      </div>
    </div>
  </div>

  <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="card">
      <div class="card-content text-center">
        <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="fas fa-users text-blue-600 text-2xl"></i>
        </div>
        <h3 class="text-2xl font-bold text-gray-800 mb-1" id="totalUsers">0</h3>
        <p class="text-gray-600">Total Users</p>
      </div>
    </div>

    <div class="card">
      <div class="card-content text-center">
        <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="fas fa-user-check text-green-600 text-2xl"></i>
        </div>
        <h3 class="text-2xl font-bold text-gray-800 mb-1" id="activeUsers">0</h3>
        <p class="text-gray-600">Active Users</p>
      </div>
    </div>

    <div class="card">
      <div class="card-content text-center">
        <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="fas fa-crown text-purple-600 text-2xl"></i>
        </div>
        <h3 class="text-2xl font-bold text-gray-800 mb-1" id="adminUsers">0</h3>
        <p class="text-gray-600">Administrators</p>
      </div>
    </div>

    <div class="card">
      <div class="card-content text-center">
        <div class="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <i class="fas fa-clock text-yellow-600 text-2xl"></i>
        </div>
        <h3 class="text-2xl font-bold text-gray-800 mb-1" id="pendingUsers">0</h3>
        <p class="text-gray-600">Pending Invites</p>
      </div>
    </div>
  </div>

  <div class="card">
    <div class="card-header">
      <h3 class="card-title">Team Members</h3>
    </div>
    <div class="card-content">
      <div class="overflow-x-auto">
        <table class="w-full">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Active</th>
              <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200" id="usersTableBody">
          </tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50 flex items-center justify-center p-4">
  <div class="bg-white rounded-xl shadow-xl max-w-md w-full max-h-[90vh] overflow-hidden">
    <div class="p-6">
      <div class="flex items-center justify-between mb-6">
        <h3 class="text-lg font-semibold text-gray-800" id="userModalTitle">Add New User</h3>
        <button onclick="closeUserModal()" class="text-gray-400 hover:text-gray-600">
          <i class="fas fa-times text-xl"></i>
        </button>
      </div>

      <form id="userForm" class="space-y-4">
        <div>
          <label class="form-label">Name</label>
          <input type="text" id="userName" class="form-control" placeholder="Full name" required>
        </div>

        <div>
          <label class="form-label">Email</label>
          <input type="email" id="userEmail" class="form-control" placeholder="user@example.com" required>
        </div>

        <div>
          <label class="form-label">Role</label>
          <select id="userRole" class="form-control">
            <option value="employee">Employee</option>
            <option value="project_manager">Project Manager</option>
            <option value="owner">Owner</option>
            <option value="superadmin">Super Admin</option>
          </select>
        </div>

        <div class="flex gap-3 pt-4">
          <button type="submit" class="btn btn-primary flex-1">
            <i class="fas fa-save mr-2"></i>
            Save User
          </button>
          <button type="button" onclick="closeUserModal()" class="btn btn-secondary">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<style>
  table {
    border-collapse: collapse;
  }

  th {
    background: var(--gray-50);
    padding: var(--space-4) var(--space-6);
    text-align: left;
    font-size: var(--text-xs);
    font-weight: 600;
    color: var(--gray-500);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  td {
    padding: var(--space-4) var(--space-6);
    border-bottom: 1px solid var(--gray-200);
  }

  .user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
    font-size: var(--text-sm);
  }

  .status-badge {
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius);
    font-size: var(--text-xs);
    font-weight: 600;
    text-transform: uppercase;
  }

  .status-active {
    background: var(--success-light);
    color: var(--success);
  }

  .status-inactive {
    background: var(--gray-100);
    color: var(--gray-600);
  }

  .status-pending {
    background: var(--warning-light);
    color: var(--warning);
  }
</style>

<script>
const sampleUsers = [
  {
    id: 1,
    name: "John Doe",
    email: "john@example.com",
    role: "project_manager",
    status: "active",
    lastActive: "2 hours ago",
    avatar: "JD"
  },
  {
    id: 2,
    name: "Jane Smith",
    email: "jane@example.com",
    role: "employee",
    status: "active",
    lastActive: "1 hour ago",
    avatar: "JS"
  },
  {
    id: 3,
    name: "Mike Johnson",
    email: "mike@example.com",
    role: "owner",
    status: "active",
    lastActive: "30 minutes ago",
    avatar: "MJ"
  },
  {
    id: 4,
    name: "Sarah Wilson",
    email: "sarah@example.com",
    role: "employee",
    status: "inactive",
    lastActive: "3 days ago",
    avatar: "SW"
  }
];

document.addEventListener('DOMContentLoaded', function() {
  loadUsers();
  loadUserStats();
});

function loadUsers() {
  const tbody = document.getElementById('usersTableBody');
  tbody.innerHTML = '';

  sampleUsers.forEach(user => {
    const row = createUserRow(user);
    tbody.appendChild(row);
  });

  gsap.from('#usersTableBody tr', {
    x: -20,
    opacity: 0,
    duration: 0.4,
    stagger: 0.05,
    ease: 'power2.out'
  });
}

function createUserRow(user) {
  const row = document.createElement('tr');
  row.className = 'hover:bg-gray-50 transition-colors';

  const roleColors = {
    superadmin: 'text-purple-600',
    owner: 'text-blue-600',
    project_manager: 'text-green-600',
    employee: 'text-gray-600'
  };

  const statusClasses = {
    active: 'status-active',
    inactive: 'status-inactive',
    pending: 'status-pending'
  };

  row.innerHTML = `
    <td class="px-6 py-4 whitespace-nowrap">
      <div class="flex items-center">
        <div class="user-avatar bg-${user.role === 'superadmin' ? 'purple' : user.role === 'owner' ? 'blue' : user.role === 'project_manager' ? 'green' : 'gray'}-100 text-${user.role === 'superadmin' ? 'purple' : user.role === 'owner' ? 'blue' : user.role === 'project_manager' ? 'green' : 'gray'}-600">
          ${user.avatar}
        </div>
        <div class="ml-4">
          <div class="text-sm font-medium text-gray-900">${user.name}</div>
          <div class="text-sm text-gray-500">${user.email}</div>
        </div>
      </div>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <span class="text-sm ${roleColors[user.role]} font-medium capitalize">${user.role.replace('_', ' ')}</span>
    </td>
    <td class="px-6 py-4 whitespace-nowrap">
      <span class="status-badge ${statusClasses[user.status]}">${user.status}</span>
    </td>
    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
      ${user.lastActive}
    </td>
    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
      <div class="flex gap-2">
        <button onclick="editUser(${user.id})" class="text-blue-600 hover:text-blue-900">
          <i class="fas fa-edit"></i>
        </button>
        <button onclick="deleteUser(${user.id})" class="text-red-600 hover:text-red-900">
          <i class="fas fa-trash"></i>
        </button>
      </div>
    </td>
  `;

  return row;
}

function loadUserStats() {
  const totalUsers = sampleUsers.length;
  const activeUsers = sampleUsers.filter(u => u.status === 'active').length;
  const adminUsers = sampleUsers.filter(u => ['superadmin', 'owner'].includes(u.role)).length;
  const pendingUsers = sampleUsers.filter(u => u.status === 'pending').length;

  animateNumber('totalUsers', 0, totalUsers, 1000);
  animateNumber('activeUsers', 0, activeUsers, 1000);
  animateNumber('adminUsers', 0, adminUsers, 1000);
  animateNumber('pendingUsers', 0, pendingUsers, 1000);
}

function animateNumber(elementId, start, end, duration) {
  const element = document.getElementById(elementId);
  const startTime = Date.now();

  function update() {
    const elapsed = Date.now() - startTime;
    const progress = Math.min(elapsed / duration, 1);
    const current = Math.floor(start + (end - start) * progress);

    element.textContent = current;

    if (progress < 1) {
      requestAnimationFrame(update);
    }
  }

  update();
}

function inviteUser() {
  document.getElementById('userModalTitle').textContent = 'Invite New User';
  document.getElementById('userForm').reset();
  document.getElementById('userModal').classList.remove('hidden');
  document.getElementById('userModal').classList.add('flex');

  gsap.from('#userModal > div', {
    scale: 0.9,
    opacity: 0,
    duration: 0.3,
    ease: 'power2.out'
  });
}

function editUser(userId) {
  const user = sampleUsers.find(u => u.id === userId);
  if (!user) return;

  document.getElementById('userModalTitle').textContent = 'Edit User';
  document.getElementById('userName').value = user.name;
  document.getElementById('userEmail').value = user.email;
  document.getElementById('userRole').value = user.role;

  document.getElementById('userModal').classList.remove('hidden');
  document.getElementById('userModal').classList.add('flex');

  gsap.from('#userModal > div', {
    scale: 0.9,
    opacity: 0,
    duration: 0.3,
    ease: 'power2.out'
  });
}

function deleteUser(userId) {
  if (confirm('Are you sure you want to delete this user?')) {
    const index = sampleUsers.findIndex(u => u.id === userId);
    if (index > -1) {
      sampleUsers.splice(index, 1);
      loadUsers();
      loadUserStats();
      showToast('User deleted successfully!', 'success');
    }
  }
}

function closeUserModal() {
  gsap.to('#userModal > div', {
    scale: 0.9,
    opacity: 0,
    duration: 0.2,
    ease: 'power2.in',
    onComplete: () => {
      document.getElementById('userModal').classList.add('hidden');
      document.getElementById('userModal').classList.remove('flex');
    }
  });
}

function refreshUsers() {
  const button = event.target.closest('button');
  const icon = button.querySelector('i');
  icon.classList.add('fa-spin');

  setTimeout(() => {
    icon.classList.remove('fa-spin');
    loadUsers();
    loadUserStats();
    showToast('Users refreshed!', 'info');
  }, 1000);
}

document.getElementById('userForm').addEventListener('submit', function(e) {
  e.preventDefault();

  const formData = new FormData(e.target);
  const userData = {
    id: Date.now(),
    name: formData.get('userName'),
    email: formData.get('userEmail'),
    role: formData.get('userRole'),
    status: 'pending',
    lastActive: 'Never',
    avatar: formData.get('userName').split(' ').map(n => n[0]).join('').toUpperCase()
  };

  sampleUsers.push(userData);
  loadUsers();
  loadUserStats();
  closeUserModal();
  showToast('User added successfully!', 'success');
});

function showToast(message, type = 'info') {
  const toast = document.createElement('div');
  toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-all duration-300`;
  toast.innerHTML = `
    <div class="flex items-center gap-3">
      <i class="fas fa-${type === 'success' ? 'check-circle text-green-500' : type === 'error' ? 'exclamation-circle text-red-500' : 'info-circle text-blue-500'}"></i>
      <span class="text-white font-medium">${message}</span>
    </div>
  `;

  if (type === 'success') {
    toast.style.background = 'linear-gradient(135deg, #10b981, #059669)';
  } else if (type === 'error') {
    toast.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
  } else {
    toast.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
  }

  document.body.appendChild(toast);

  setTimeout(() => {
    toast.style.transform = 'translateX(0)';
  }, 100);

  setTimeout(() => {
    toast.style.transform = 'translateX(100%)';
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 300);
  }, 3000);
}
</script>
